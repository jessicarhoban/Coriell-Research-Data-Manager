{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Filepath</th>\n",
       "      <th>Match Status</th>\n",
       "      <th># Matched Files</th>\n",
       "      <th># Unmatched Files</th>\n",
       "      <th># Duplicate Files</th>\n",
       "      <th>Folder Name</th>\n",
       "      <th>Sample Name</th>\n",
       "      <th>Sample Number</th>\n",
       "      <th>Lane Number</th>\n",
       "      <th>Read</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CUH01110_CKDL240010629-1A_22JMMTLT3_L8_1</td>\n",
       "      <td>Unmatched</td>\n",
       "      <td>0</td>\n",
       "      <td>266</td>\n",
       "      <td>0</td>\n",
       "      <td>2024-04-10_chip_ampliseq_jj</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CUH01110_CKDL240010629-1A_22JMMTLT3_L8_2</td>\n",
       "      <td>Unmatched</td>\n",
       "      <td>0</td>\n",
       "      <td>266</td>\n",
       "      <td>0</td>\n",
       "      <td>2024-04-10_chip_ampliseq_jj</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CUH00648_CKDL240010629-1A_22JMMTLT3_L8_1</td>\n",
       "      <td>Unmatched</td>\n",
       "      <td>0</td>\n",
       "      <td>266</td>\n",
       "      <td>0</td>\n",
       "      <td>2024-04-10_chip_ampliseq_jj</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CUH00648_CKDL240010629-1A_22JMMTLT3_L8_2</td>\n",
       "      <td>Unmatched</td>\n",
       "      <td>0</td>\n",
       "      <td>266</td>\n",
       "      <td>0</td>\n",
       "      <td>2024-04-10_chip_ampliseq_jj</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CUH00689_CKDL240010629-1A_22JMMTLT3_L8_2</td>\n",
       "      <td>Unmatched</td>\n",
       "      <td>0</td>\n",
       "      <td>266</td>\n",
       "      <td>0</td>\n",
       "      <td>2024-04-10_chip_ampliseq_jj</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   Filepath Match Status  # Matched Files  \\\n",
       "0  CUH01110_CKDL240010629-1A_22JMMTLT3_L8_1    Unmatched                0   \n",
       "1  CUH01110_CKDL240010629-1A_22JMMTLT3_L8_2    Unmatched                0   \n",
       "2  CUH00648_CKDL240010629-1A_22JMMTLT3_L8_1    Unmatched                0   \n",
       "3  CUH00648_CKDL240010629-1A_22JMMTLT3_L8_2    Unmatched                0   \n",
       "4  CUH00689_CKDL240010629-1A_22JMMTLT3_L8_2    Unmatched                0   \n",
       "\n",
       "   # Unmatched Files  # Duplicate Files                  Folder Name  \\\n",
       "0                266                  0  2024-04-10_chip_ampliseq_jj   \n",
       "1                266                  0  2024-04-10_chip_ampliseq_jj   \n",
       "2                266                  0  2024-04-10_chip_ampliseq_jj   \n",
       "3                266                  0  2024-04-10_chip_ampliseq_jj   \n",
       "4                266                  0  2024-04-10_chip_ampliseq_jj   \n",
       "\n",
       "  Sample Name Sample Number Lane Number Read  \n",
       "0         NaN           NaN         NaN  NaN  \n",
       "1         NaN           NaN         NaN  NaN  \n",
       "2         NaN           NaN         NaN  NaN  \n",
       "3         NaN           NaN         NaN  NaN  \n",
       "4         NaN           NaN         NaN  NaN  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Filepath</th>\n",
       "      <th>Match Status</th>\n",
       "      <th># Matched Files</th>\n",
       "      <th># Unmatched Files</th>\n",
       "      <th># Duplicate Files</th>\n",
       "      <th>Folder Name</th>\n",
       "      <th>Sample Name</th>\n",
       "      <th>Sample Number</th>\n",
       "      <th>Lane Number</th>\n",
       "      <th>Read</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>378</th>\n",
       "      <td>OL-gfp-neg-b_S7_L004_R1_001</td>\n",
       "      <td>Matched</td>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>2019-08-29_rrbs39_himani_intestine_12month</td>\n",
       "      <td>OL-gfp-neg-b</td>\n",
       "      <td>S7</td>\n",
       "      <td>L004</td>\n",
       "      <td>R1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>379</th>\n",
       "      <td>OL-gfp-neg-b_S7_L002_R1_001</td>\n",
       "      <td>Matched</td>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>2019-08-29_rrbs39_himani_intestine_12month</td>\n",
       "      <td>OL-gfp-neg-b</td>\n",
       "      <td>S7</td>\n",
       "      <td>L002</td>\n",
       "      <td>R1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>380</th>\n",
       "      <td>OL-gfp-neg-b_S7_L003_R1_001</td>\n",
       "      <td>Matched</td>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>2019-08-29_rrbs39_himani_intestine_12month</td>\n",
       "      <td>OL-gfp-neg-b</td>\n",
       "      <td>S7</td>\n",
       "      <td>L003</td>\n",
       "      <td>R1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>381</th>\n",
       "      <td>OL-gfp-neg-b_S7_L001_R1_001</td>\n",
       "      <td>Matched</td>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>2019-08-29_rrbs39_himani_intestine_12month</td>\n",
       "      <td>OL-gfp-neg-b</td>\n",
       "      <td>S7</td>\n",
       "      <td>L001</td>\n",
       "      <td>R1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>382</th>\n",
       "      <td>OU-gfp-neg-a_S2_L002_R1_001</td>\n",
       "      <td>Matched</td>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>2019-08-29_rrbs39_himani_intestine_12month</td>\n",
       "      <td>OU-gfp-neg-a</td>\n",
       "      <td>S2</td>\n",
       "      <td>L002</td>\n",
       "      <td>R1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Filepath Match Status  # Matched Files  \\\n",
       "378  OL-gfp-neg-b_S7_L004_R1_001      Matched               32   \n",
       "379  OL-gfp-neg-b_S7_L002_R1_001      Matched               32   \n",
       "380  OL-gfp-neg-b_S7_L003_R1_001      Matched               32   \n",
       "381  OL-gfp-neg-b_S7_L001_R1_001      Matched               32   \n",
       "382  OU-gfp-neg-a_S2_L002_R1_001      Matched               32   \n",
       "\n",
       "     # Unmatched Files  # Duplicate Files  \\\n",
       "378                  0                 24   \n",
       "379                  0                 24   \n",
       "380                  0                 24   \n",
       "381                  0                 24   \n",
       "382                  0                 24   \n",
       "\n",
       "                                    Folder Name   Sample Name Sample Number  \\\n",
       "378  2019-08-29_rrbs39_himani_intestine_12month  OL-gfp-neg-b            S7   \n",
       "379  2019-08-29_rrbs39_himani_intestine_12month  OL-gfp-neg-b            S7   \n",
       "380  2019-08-29_rrbs39_himani_intestine_12month  OL-gfp-neg-b            S7   \n",
       "381  2019-08-29_rrbs39_himani_intestine_12month  OL-gfp-neg-b            S7   \n",
       "382  2019-08-29_rrbs39_himani_intestine_12month  OU-gfp-neg-a            S2   \n",
       "\n",
       "    Lane Number Read  \n",
       "378        L004   R1  \n",
       "379        L002   R1  \n",
       "380        L003   R1  \n",
       "381        L001   R1  \n",
       "382        L002   R1  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df[\"Match Status\"]==\"Matched\"].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Filepath', 'Match Status', '# Matched Files', '# Unmatched Files',\n",
       "       '# Duplicate Files', 'Folder Name', 'Sample Name', 'Sample Number',\n",
       "       'Lane Number', 'Read'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame()\n",
    "\n",
    "for f in flist2:\n",
    "    if \"fq_files\" in f:\n",
    "        if len(f[\"fq_files\"])>0:\n",
    "\n",
    "\n",
    "            sample_rows = []\n",
    "            matched_samples = set()\n",
    "\n",
    "            #---------------CHECK FOR FASTQ NAMING MATCHES---------------\n",
    "            for file in f[\"fq_files\"]:\n",
    "                matches = re.findall(\"(.*)_(.*?)_(.*?)_(.*?)_001\", file)\n",
    "                sample = {\"Filepath\": file}\n",
    "\n",
    "                if len(matches)>0:\n",
    "                    sample[\"Match Status\"] = \"Matched\"\n",
    "                    sample[\"Sample Name\"] = matches[0][0]\n",
    "                    sample[\"Sample Number\"] = matches[0][1]\n",
    "                    sample[\"Lane Number\"] = matches[0][2]\n",
    "                    sample[\"Read\"] = matches[0][3]\n",
    "                    matched_samples.add(matches[0][0])\n",
    "                    sample_rows.append(sample)\n",
    "\n",
    "            # Re runthrough for duplicates\n",
    "            for file in f[\"fq_files\"]:\n",
    "                matches = re.findall(\"(.*)_(.*?)_(.*?)_(.*?)_001\", file)\n",
    "                sample = {\"Filepath\": file}\n",
    "\n",
    "                if len(matches)==0:\n",
    "                    if any([s for s in matched_samples if s in file]):\n",
    "                        sample[\"Match Status\"] = \"Duplicate\"\n",
    "                    else:\n",
    "                        sample[\"Match Status\"] = \"Unmatched\"\n",
    "\n",
    "                    sample_rows.append(sample)\n",
    "\n",
    "            #\n",
    "            sample_df = pd.DataFrame(sample_rows)\n",
    "            sample_df[\"# Matched Files\"] = len(sample_df[sample_df[\"Match Status\"]==\"Matched\"])\n",
    "            sample_df[\"# Unmatched Files\"] = len(sample_df[sample_df[\"Match Status\"]==\"Unmatched\"])\n",
    "            sample_df[\"# Duplicate Files\"] = len(sample_df[sample_df[\"Match Status\"]==\"Duplicate\"])\n",
    "            sample_df[\"Folder Name\"] = f[\"foldername\"]\n",
    "\n",
    "\n",
    "            #---------------CHECK FOR SAMPLESHEETS---------------\n",
    "            if \"samplesheets\" in f:\n",
    "                samplesheets = f[\"samplesheets\"]\n",
    "                if (len(samplesheets) >0) & (f[\"foldername\"] not in weird_generally):\n",
    "\n",
    "                    # Deduplicate:\n",
    "                    if len(samplesheets) >1:\n",
    "                        if f[\"foldername\"] in multiple_ssheets:\n",
    "                            samplesheets = {k:v for k,v in samplesheets.items() \n",
    "                                            if k == multiple_ssheets[f[\"foldername\"]]}\n",
    "                   \n",
    "                    # Only 1 samplesheet per file now\n",
    "                    samplesheet_df = pd.DataFrame()\n",
    "                    \n",
    "                    for name,df1 in samplesheets.items():\n",
    "                        allowed_cols = ['sample_id','index','sample_project','i7_index_id','index2','i5_index_id',\n",
    "                                            'index_plate_well','sample_name','description']\n",
    "\n",
    "                        df1.columns = [str(x).lower() for x in df1.columns]\n",
    "                        df1 = df1[[x for x in df1.columns if x in allowed_cols]]\n",
    "                        samplesheet_df = pd.concat([df1,samplesheet_df],ignore_index=True)\n",
    "\n",
    "                    samplesheet_df = samplesheet_df.drop_duplicates()\n",
    "\n",
    "                    if \"sample_id\" in samplesheet_df.columns:\n",
    "                        for index,sample_row in sample_df.iterrows():\n",
    "                            if sample_row[\"Match Status\"] == \"Matched\":\n",
    "                                samplesheet_rows = samplesheet_df.loc[samplesheet_df[\"sample_id\"] == sample_row[\"Sample Name\"]].reset_index()\n",
    "                                if len(samplesheet_rows)==1:\n",
    "                                    for col in samplesheet_rows.columns:\n",
    "                                        sample_df.loc[index,col] = samplesheet_rows.loc[0][col]\n",
    "\n",
    "\n",
    "                            #elif sample_row[\"Match Status\"] == \"Unmatched\":\n",
    "                                \n",
    "\n",
    "            df = pd.concat([df,sample_df], ignore_index=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
